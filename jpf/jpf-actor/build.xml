<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:

    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process
-->

<project name="jpf-actor" default="build" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <!--
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>

  <!-- this is where we get the 'jpf.core' location from -->
  <property file="${user.home}/.jpf/site.properties"/> 

  <!-- if there is none, default to a 'jpf-core' peer dir -->
  <property name="jpf-core" value = "../jpf-core"/>

  <!-- get the jpf-core path properties -->
  <property file="${jpf-core}/jpf.properties"/>


  <!-- compiler settings -->
  <property name="src_level"     value="6"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>


  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <pathelement location="build/classes"/>
    <pathelement location="build/peers"/>

    <fileset dir=".">
      <include name="lib/*.jar"/>
    </fileset>

    <!-- add in what we need from the core -->
    <pathelement path="${jpf-core.native_classpath}"/>

  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>

    <available file="src/main"            type="dir" property="have_main"/>
    <available file="src/annotations"     type="dir" property="have_annotations"/>
    <available file="src/peers"           type="dir" property="have_peers"/>
    <available file="src/classes"         type="dir" property="have_classes"/>
    <available file="src/tests"           type="dir" property="have_tests"/>
    <available file="src/examples"        type="dir" property="have_examples"/>

    <condition property="have_jvm_code">
      <or>
        <isset property="have_main"/>
        <isset property="have_peers"/>
      </or>
    </condition>

    <condition property="have_jpf_code">
      <or>
        <isset property="have_classes"/>
        <isset property="have_annotations"/>
      </or>
    </condition>


    <!-- the things that have to be in the classpath if we want to use Basset's scala language support -->
    <available file="lib/scala-compiler-2.7.3.jar"      type="file" property="have_scala_compiler"/>
    <available file="lib/scala-library-2.7.3.jar"      type="file" property="have_scala_library"/>

    <condition property="have_scala">
      <and>
        <isset property="have_scala_compiler"/>
        <isset property="have_scala_library"/>
      </and>
    </condition>


    <!-- optionally set the required artifacts here
    <fail unless="have_main">no src/main</fail>
    <fail unless="have_annotations">no src/annotations</fail>
    <fail unless="have_peers">no src/peers</fail>
    <fail unless="have_classes">no src/classes</fail>
    <fail unless="have_tests">no src/tests</fail>
    <fail unless="have_examples">no src/examples</fail>
    <fail unless="have_scala_main">no scala-src/main</fail>
    <fail unless="have_scala_classes">no scala-src/classes</fail>
    <fail unless="have_scala_examples">no scala-src/examples</fail>
    -->

  </target>

  <!-- init: Scala initialization -->
  <target name="-init-scala" depends="-init" if="have_scala">
    <!-- add support for scalac; if you want a warning, you can pull this out of the target -->
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </taskdef>
    <available file="scala-src/main"      type="dir" property="have_scala_main"/>
    <available file="scala-src/classes"   type="dir" property="have_scala_classes"/>
    <available file="scala-src/examples"  type="dir" property="have_scala_examples"/>
    <available file="scala-src/tests"     type="dir" property="have_scala_tests"/>
  </target>


  <!-- ======================= COMPILE SECTION ============================= -->

  <!-- public compile -->
  <target name="compile" depends="-init,-compile-annotations,-compile-main,-compile-classes,-compile-peers,-compile-examples,-compile-tests,-compile-scala"
          description="compile all Basset core sources" >
  </target>

  <target name="-compile-annotations" if="have_annotations">
    <mkdir dir="build/annotations"/>
    <javac srcdir="src/annotations" destdir="build/annotations"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}" classpath=""/>
  </target>

  <target name="-compile-main" if="have_main">
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path">
      <exclude name="**/ActorFilteringSerializer*.java" />
    </javac>
  </target>
	
  <target name="-compile-peers" if="have_peers" depends="-compile-main" >
    <mkdir dir="build/peers"/>
    <javac srcdir="src/peers" destdir="build/peers"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <target name="-compile-classes" if="have_classes" depends="-compile-annotations,-compile-main" >
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <exclude name="gov/nasa/jpf/actor/adapter/scala/**" />
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-tests" if="have_tests" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/tests"/>
    <javac srcdir="src/tests" destdir="build/tests"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           includes="*,gov/nasa/jpf/test/**">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
        <pathelement location="build/examples"/>
      </classpath>
    </javac>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-annotations,-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/classes"/>
      </classpath>
 <!--          classpathref="lib.path"/>  -->
      </javac> 
  </target>


  <!-- ======================= SCALA SECTION ================================ -->
  <target name="-compile-scala" depends="-compile-scala-classes,-compile-scala-examples,-compile-scala-tests"
          description="compile all Scala sources" >
  </target>


  <target name="-compile-scala-main" depends="-init-scala" if="have_scala_main">
    <mkdir dir="build/main"/>
    <scalac srcdir="scala-src/main" destdir="build/main">
      <include name="**/*.scala" />
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </scalac>
  </target>

  <target name="-compile-scala-classes" depends="-init-scala" if="have_scala_classes">
    <mkdir dir="build/classes"/>
    <javac srcdir="src/classes" destdir="build/classes"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
      <include name="gov/nasa/jpf/actor/adapter/scala/**" />
      <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/annotations"/>
      </classpath>
    </javac>
    <scalac srcdir="scala-src/classes" destdir="build/classes">
      <include name="**/*.scala" />
      <classpath>
        <path refid="lib.path"/>
      </classpath>
    </scalac>
  </target>

  <target name="-compile-scala-examples" depends="-init-scala" if="have_scala_examples">
    <mkdir dir="build/examples"/>
    <scalac srcdir="scala-src/examples" destdir="build/examples"
            deprecation="${deprecation}">
     <include name="**/*.scala" />
     <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/classes"/>
      </classpath>
    </scalac>
  </target>
	
  <target name="-compile-scala-tests" depends="-init-scala" if="have_scala_tests">
    <mkdir dir="build/examples"/>
    <scalac srcdir="scala-src/tests" destdir="build/tests"
            deprecation="${deprecation}">
     <include name="**/*.scala" />
     <classpath>
        <path refid="lib.path"/>
        <pathelement location="build/classes"/>
      </classpath>
    </scalac>
  </target>

	
  <!-- ======================= MISC SECTION ================================ -->

  <!-- build jars -->
  <target name="build" depends="compile,-jar-jvm,-jar-jpf,-jar-annotations,-jar-examples"
        description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="-jar-examples" if="have_jvm_code">
    <jar jarfile="build/${ant.project.name}-examples.jar">
      <fileset dir="build/examples" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-jvm" if="have_jvm_code">
    <jar jarfile="build/${ant.project.name}.jar">
      <fileset dir="build/main" erroronmissingdir="false"/>
      <fileset dir="build/peers" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-jpf" if="have_jpf_code">
    <jar jarfile="build/${ant.project.name}-classes.jar">
      <fileset dir="build/classes" erroronmissingdir="false"/>
      <fileset dir="build/annotations" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="-jar-annotations" if="have_annotations">
    <!-- optional jar that contains annotations to be used in non-JPF dependent apps -->
    <jar jarfile="build/${ant.project.name}-annotations.jar">
      <fileset dir="build/annotations" erroronmissingdir="false"/>
    </jar>
  </target>

  <target name="dist" description="build binary distribution">
    <delete file="build/${ant.project.name}.zip"/>
    <!-- 2do this seems stupid - there needs to be a better way to re-base (zip basedir fails miserably) -->
    <zip destfile="build/${ant.project.name}.zip" update="false" excludes="*">
      <zipfileset file="jpf.properties"  prefix="${ant.project.name}"/>
      <!-- don't have one
      <zipfileset dir="lib"  prefix="${ant.project.name}/lib"/>
      -->
      <zipfileset dir="bin"  prefix="${ant.project.name}/bin"/>
      <zipfileset dir="build" includes="*.jar" prefix="${ant.project.name}/build"/>
      <zipfileset dir="tools" includes="Run*.jar" prefix="${ant.project.name}/tools"/>
    </zip>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="build" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>


  <!-- ======================= TEST SECTION ================================ -->
  <target name="test" if="have_tests" depends="-test-foundry,-test-scala"
          description="compile and run all regression tests" >
  </target>

  <target name="-test-foundry" depends="build"
          description="compile and run core and actor foundry regression tests">

    <property name="junit.usefile" value="true"/>

    <junit printsummary="on" showoutput="off" haltonfailure="yes"
           fork="yes" forkmode="perTest" maxmemory="1024m">
      <formatter type="plain" usefile="${junit.usefile}"/>

      <classpath>
        <path refid="lib.path"/>

        <pathelement location="build/tests"/>
        <pathelement location="build/examples"/>
        <pathelement location="build/classes"/>
        <pathelement location="build/annotations"/>

      </classpath>

      <batchtest todir="build/tests">
        <fileset dir="build/tests">
          <exclude name="**/JPF_*.class"/>
          <exclude name="gov/nasa/jpf/test/actor/Scala*Test.class"/>
          <include name="gov/nasa/jpf/test/actor/*Test.class"/>
          <include name="gov/nasa/jpf/test/actor/testmji/*Test.class"/>
        </fileset>
      </batchtest>

    </junit>

  </target>

  <target name="-test-scala" if="have_scala" depends="build"
          description="compile and run scala regression tests">

    <property name="junit.usefile" value="true"/>

    <junit printsummary="on" showoutput="off" haltonfailure="yes"
           fork="yes" forkmode="perTest" maxmemory="1024m">
      <formatter type="plain" usefile="${junit.usefile}"/>

      <classpath>
        <path refid="lib.path"/>

        <pathelement location="build/tests"/>
        <pathelement location="build/examples"/>
        <pathelement location="build/classes"/>
        <pathelement location="build/annotations"/>

      </classpath>

      <batchtest todir="build/tests">
        <fileset dir="build/tests">
          <include name="gov/nasa/jpf/test/actor/Scala*Test.class"/>
        </fileset>
      </batchtest>

    </junit>

  </target>


</project>
